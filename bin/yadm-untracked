#!/usr/bin/env bash

# To run, first setup the 3 arrays described below then `yadm-untracked`
# can be run without any arguments. If you wish to create an alias to run
# this as, for example `yadm untracked` then the following command will
# add the alias: `yadm gitconfig alias.untracked '!<PATH>/yadm-untracked'`

# Possible improvements:
# - Rather than editing the script to configure have a separate config
# - Reduce the amount of configuration; I have not figured out a way to 
#   get rid of the non-recursive and ignore. The recursive list could be
#   built from the directories that are present in `yadm list`

# Edit your config here...

# The directories and files in this list are searched recursively to build
# a list of files that you expect are tracked with `yadm`. Items in this
# list are relative to the root of your YADM repo (which is $HOME for most).
yadm_tracked_recursively=(bin .config .vim)

# Same as above but don't search recursively
yadm_tracked_nonrecursively=(.)

# A list of directories and files that will not be reported as untracked if
# found in the above two searches.
ignore_files_and_dirs=(
    .CFUserTextEncoding
    .DS_Store
    .config/nvim/plugin/packer_compiled.lua
    .config/gh
    .config/git/gitconfig.private
    .vim/autoload/plug.vim
)

# Code, don't change from this point
#########################################################################

root=`yadm enter echo '$GIT_WORK_TREE'`

cd $root

find_list=$(mktemp -t find_list)
find ${yadm_tracked_recursively[*]} -type f >$find_list
find ${yadm_tracked_nonrecursively[*]} -maxdepth 1 -type f |
  awk "{sub(\"^\./\", \"\"); sub(\"^$root/\", \"\"); print }" >>$find_list
sort -o $find_list $find_list

yadm_list=$(mktemp -t yadm_list)
yadm list >$yadm_list
find ${ignore_files_and_dirs[*]} -type f >>$yadm_list
sort -o $yadm_list $yadm_list

# Show the files not in `yadm list`
comm -23 $find_list $yadm_list

rm -f $find_list $yadm_list
